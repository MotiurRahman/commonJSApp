

'use strict';

var Orchestrator=require('../'),
should=require('should');
require('mocha'),

describe('orchestrator',function(){
describe('_resetSpecificTasks()',function(){

it('should set done = false on specified done tasks',function(done){
var orchestrator,task1,task2;


task1={
name:'test1',
fn:function(){},
done:!0},

task2={
name:'test2',
fn:function(){},
done:!0},



orchestrator=new Orchestrator,
orchestrator.tasks={
test1:task1,
test2:task2},



orchestrator._resetSpecificTasks(['test1','test2']),


task1.done.should.equal(!1),
task2.done.should.equal(!1),
done();
}),

it('should not set done = false if done does not exist',function(done){
var orchestrator,task1,task2;


task1={
name:'test1',
fn:function(){}},


task2={
name:'test2',
fn:function(){}},




orchestrator=new Orchestrator,
orchestrator.tasks={
test1:task1,
test2:task2},



orchestrator._resetSpecificTasks(['test1','test2']),


should.not.exist(task1.done),
should.not.exist(task2.done),
done();
}),

it('should set done = false on done dependency',function(done){
var orchestrator,task,dep;


task={
name:'test',
dep:['dep'],
fn:function(){}},


dep={
name:'dep',
fn:function(){},
done:!0},



orchestrator=new Orchestrator,
orchestrator.tasks={
test:task,
dep:dep},



orchestrator._resetSpecificTasks(['test']),


dep.done.should.equal(!1),
done();
}),

it('should not set done on irrelevant tasks',function(done){
var orchestrator,task,irrelevant;


task={
name:'test',
fn:function(){}},


irrelevant={
name:'irrelevant',
fn:function(){},
done:!0},



orchestrator=new Orchestrator,
orchestrator.tasks={
test:task,
irrelevant:irrelevant},



orchestrator._resetSpecificTasks(['test']),


irrelevant.done.should.equal(!0),
done();
}),

it('should not die if dependency does not exist',function(done){
var orchestrator,task;


task={
name:'test',
dep:['dep'],
fn:function(){}},




orchestrator=new Orchestrator,
orchestrator.tasks={
test:task},



orchestrator._resetSpecificTasks(['test']),



done();
});

});
});
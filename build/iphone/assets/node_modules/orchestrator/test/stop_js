

'use strict';

var Orchestrator=require('../'),
should=require('should');
require('mocha'),

describe('orchestrator',function(){
describe('stop()',function(){

it('should call doneCallback',function(done){
var orchestrator,a=0;


orchestrator=new Orchestrator,
orchestrator.doneCallback=function(){
a++;
},


orchestrator.stop(null),


a.should.equal(1),
done();
}),

it('should pass error to doneCallback',function(done){
var orchestrator,actualError,expectedError='This is a test error';


orchestrator=new Orchestrator,
orchestrator.doneCallback=function(err){
actualError=err;
},


orchestrator.stop(expectedError),


should.exist(actualError),
actualError.should.equal(expectedError),
done();
}),

it('should set isRunning to false',function(done){
var orchestrator;


orchestrator=new Orchestrator,
orchestrator.isRunning=!0,


orchestrator.stop(null,!0),


orchestrator.isRunning.should.equal(!1),
done();
}),

it('should log success',function(done){
var orchestrator,actualLog;


orchestrator=new Orchestrator,
orchestrator.on('stop',function(e){
actualLog=e;
}),


orchestrator.stop(null,!0),


should.exist(actualLog),
should.not.exist(actualLog.task),
actualLog.message.indexOf('succeed').should.be.above(-1),
done();
}),

it('should log failure',function(done){
var orchestrator,actualLog;


orchestrator=new Orchestrator,
orchestrator.on('err',function(e){
actualLog=e;
}),


orchestrator.stop(null,!1),


should.exist(actualLog),
should.not.exist(actualLog.task),
actualLog.message.indexOf('abort').should.be.above(-1),
done();
}),

it('should log exception',function(done){
var orchestrator,actualLog,actualErr='the error';


orchestrator=new Orchestrator,
orchestrator.on('err',function(e){
actualLog=e;
}),


orchestrator.stop(actualErr),


should.exist(actualLog),
should.not.exist(actualLog.task),
actualLog.message.indexOf('fail').should.be.above(-1),
actualLog.err.should.equal(actualErr),
done();
}),

it('should throw if no callback and no err handler',function(done){
var orchestrator,actualErr,expectedErr='the error';


orchestrator=new Orchestrator;


try{
orchestrator.stop(expectedErr);


}catch(err){
actualErr=err;
}

actualErr.should.equal(expectedErr),
done();
});

});
});
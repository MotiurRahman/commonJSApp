

'use strict';

var Orchestrator=require('../'),
Q=require('q');
require('should'),
require('mocha'),

describe('orchestrator',function(){
describe('run() tasks',function(){

it('should run multiple tasks',function(done){
var orchestrator,a,fn,fn2;


orchestrator=new Orchestrator,
a=0,
fn=function(){
++a;
},
fn2=function(){
++a;
},
orchestrator.add('test',fn),
orchestrator.add('test2',fn2),


orchestrator.start('test','test2'),


a.should.equal(2),
done();
}),

it('should run multiple tasks as array',function(done){
var orchestrator,a,fn,fn2,fn3;


orchestrator=new Orchestrator,
a=0,
fn=function(){
++a;
},
fn2=function(){
++a;
},
fn3=function(){
throw new Error('run wrong task');
},
orchestrator.add('test',fn),
orchestrator.add('test2',fn2),
orchestrator.add('test3',fn3),


orchestrator.start(['test','test2']),


a.should.equal(2),
done();
}),

it('should run all tasks when call run() multiple times',function(done){
var orchestrator,a,fn,fn2;


orchestrator=new Orchestrator,
a=0,
fn=function(){
++a;
},
fn2=function(){
++a;
},
orchestrator.add('test',fn),
orchestrator.add('test2',fn2),


orchestrator.start('test'),
orchestrator.start('test2'),


a.should.equal(2),
done();
}),

it('should add new tasks at the front of the queue',function(done){
var orchestrator,a,fn,fn2,fn3,aAtFn2,aAtFn3,test2pos,test3pos;


orchestrator=new Orchestrator,
a=0,
fn=function(){
++a,
orchestrator.start('test3');
},
fn2=function(){
++a,
aAtFn2=a;
},
fn3=function(){
++a,
aAtFn3=a;
},
orchestrator.add('test',fn),
orchestrator.add('test2',fn2),
orchestrator.add('test3',fn3),


orchestrator.start('test','test2'),


aAtFn3.should.equal(2),
aAtFn2.should.equal(3),
a.should.equal(3),
test2pos=orchestrator.seq.indexOf('test2'),
test3pos=orchestrator.seq.indexOf('test3'),
test2pos.should.be.above(-1),
test3pos.should.be.above(-1),
test2pos.should.be.above(test3pos),
done();
}),

it('should run all tasks when call run() multiple times',function(done){
var orchestrator,a,fn,fn2;


orchestrator=new Orchestrator,
a=0,
fn=function(){
++a;
},
fn2=function(){
++a;
},
orchestrator.add('test',fn),
orchestrator.add('test2',fn2),


orchestrator.start('test'),
orchestrator.start('test2'),


a.should.equal(2),
done();
}),

it('should run all tasks when call run() with no arguments',function(done){
var orchestrator,a,fn,fn2;


orchestrator=new Orchestrator,
a=0,
fn=function(){
++a;
},
fn2=function(){
++a;
},
orchestrator.add('test',fn),
orchestrator.add('test2',fn2),


orchestrator.start(),


a.should.equal(2),
done();
}),

it('should run all async promise tasks',function(done){
var orchestrator,a,fn,fn2;


orchestrator=new Orchestrator,
a=0,
fn=function(){
var deferred=Q.defer();




return setTimeout(function(){++a,deferred.resolve()},1),deferred.promise;
},
fn2=function(){
var deferred=Q.defer();




return setTimeout(function(){++a,deferred.resolve()},1),deferred.promise;
},
orchestrator.add('test',fn),
orchestrator.add('test2',fn2),


orchestrator.start('test'),
orchestrator.start('test2',function(){

orchestrator.isRunning.should.equal(!1),
a.should.equal(2),
done();
}),
orchestrator.isRunning.should.equal(!0);
}),

it('should run all async callback tasks',function(done){
var orchestrator,a,fn,fn2;


orchestrator=new Orchestrator,
a=0,
fn=function(cb){
setTimeout(function(){
++a,
cb(null);
},1);
},
fn2=function(cb){
setTimeout(function(){
++a,
cb(null);
},1);
},
orchestrator.add('test',fn),
orchestrator.add('test2',fn2),


orchestrator.start('test'),
orchestrator.start('test2',function(){

orchestrator.isRunning.should.equal(!1),
a.should.equal(2),
done();
}),
orchestrator.isRunning.should.equal(!0);
}),

it('should run task scoped to orchestrator',function(done){
var orchestrator,a,fn;


orchestrator=new Orchestrator,
a=0,
fn=function(){
this.should.equal(orchestrator),
++a;
},
orchestrator.add('test',fn),


orchestrator.start('test'),


a.should.equal(1),
orchestrator.isRunning.should.equal(!1),
done();
}),



it('should run task multiple times when call run(task) multiple times',function(done){
var orchestrator,a,fn;


orchestrator=new Orchestrator,
a=0,
fn=function(){
++a;
},
orchestrator.add('test',fn),


orchestrator.start('test'),
orchestrator.start('test'),


a.should.equal(2),
done();
}),

it('should run task dependencies multiple times when call run(task) multiple times',function(done){
var orchestrator,a,fn,dep;


orchestrator=new Orchestrator,
a=0,
dep=function(){
++a;
},
fn=function(){
},
orchestrator.add('dep',dep),
orchestrator.add('test',['dep'],fn),


orchestrator.start('test'),
orchestrator.start('test'),


a.should.equal(2),
done();
}),

it('should run task multiple times when call run() (default) multiple times',function(done){
var orchestrator,a,fn;


orchestrator=new Orchestrator,
a=0,
fn=function(){
++a;
},
orchestrator.add('test',fn),
orchestrator.add('default',['test'],function(){}),


orchestrator.start(function(){

orchestrator.start(function(){


a.should.equal(2),
done();
});
});
}),

it('should run no-op task',function(done){
var orchestrator;


orchestrator=new Orchestrator,
orchestrator.add('test'),


orchestrator.start(function(){

done();
});
});

});
});
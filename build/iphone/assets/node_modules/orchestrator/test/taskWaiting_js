


'use strict';

var Orchestrator=require('../'),
Q=require('q'),
map=require('map-stream'),
es=require('event-stream'),
should=require('should');
require('mocha'),

describe('orchestrator',function(){
describe('_runTask() waits for done correctly',function(){

it('sync task sets done after calling function',function(done){
var orchestrator,task,a;


a=0,
task={
name:'test',
fn:function(){
should.not.exist(task.done);
}},



orchestrator=new Orchestrator,
orchestrator._runStep=function(){
a.should.equal(0),
a++;
},
orchestrator._runTask(task),


should.exist(task.done),
task.done.should.equal(!0),
a.should.equal(1),
done();
}),

it('sync task logs finish after calling function',function(done){
var orchestrator,task,a;


a=0,
task={
name:'test',
fn:function(){
a.should.equal(0);
}},



orchestrator=new Orchestrator,
orchestrator.on('task_stop',function(e){
should.exist(e.task),
e.task.should.equal('test'),
e.message.indexOf('finish')&&
++a;

}),
orchestrator._runStep=function(){},


orchestrator._runTask(task),


a.should.equal(1),
done();
}),

it('async promise task sets done after task resolves',function(done){
var orchestrator,task,a,timeout=5;


a=0,
task={
name:'test',
fn:function(){
var deferred=Q.defer();




return setTimeout(function(){should.not.exist(task.done),deferred.resolve()},timeout),deferred.promise;
}},



orchestrator=new Orchestrator,
orchestrator._runStep=function(){
a.should.equal(0),
a++;
},
orchestrator._runTask(task),


should.not.exist(task.done),
setTimeout(function(){
should.exist(task.done),
task.done.should.equal(!0),
a.should.equal(1),
done();
},2*timeout);
}),

it('async promise task logs finish after task resolves',function(done){
var orchestrator,task,a,timeout=5;


a=0,
task={
name:'test',
fn:function(){
var deferred=Q.defer();




return setTimeout(function(){a.should.equal(0),deferred.resolve()},timeout),deferred.promise;
}},



orchestrator=new Orchestrator,
orchestrator.on('task_stop',function(e){
should.exist(e.task),
e.task.should.equal('test'),
-1<e.message.indexOf('promise')&&
++a;

}),
orchestrator._runStep=function(){},


orchestrator._runTask(task),


setTimeout(function(){
a.should.equal(1),
done();
},2*timeout);
}),

it('async callback task sets done after task resolves',function(done){
var orchestrator,task,a,timeout=5;


a=0,
task={
name:'test',
fn:function(cb){
setTimeout(function(){
should.not.exist(task.done),
cb(null);
},timeout);
}},



orchestrator=new Orchestrator,
orchestrator._runStep=function(){
a.should.equal(0),
a++;
},
orchestrator._runTask(task),


should.not.exist(task.done),
setTimeout(function(){
should.exist(task.done),
task.done.should.equal(!0),
a.should.equal(1),
done();
},2*timeout);
}),

it('async callback task logs finish after task resolves',function(done){
var orchestrator,task,a,timeout=5;


a=0,
task={
name:'test',
fn:function(cb){
setTimeout(function(){
should.not.exist(task.done),
cb(null);
},timeout);
}},



orchestrator=new Orchestrator,
orchestrator.on('task_stop',function(e){
should.exist(e.task),
e.task.should.equal('test'),
-1<e.message.indexOf('callback')&&
++a;

}),
orchestrator._runStep=function(){},


orchestrator._runTask(task),


setTimeout(function(){
a.should.equal(1),
done();
},2*timeout);
}),

it('async stream task sets done after task resolves',function(done){
var orchestrator,task,a,timeout=5;


a=0,
task={
name:'test',
fn:function(){
return es.readable(function(){
this.emit('data',{a:'rgs'}),
this.emit('end');
}).pipe(map(function(f,cb){
setTimeout(function(){
cb(null,f);
},timeout);
}));
}},

should.not.exist(task.done),


orchestrator=new Orchestrator,
orchestrator._runStep=function(){
a.should.equal(0),
a++;
},
orchestrator._runTask(task),


setTimeout(function(){
should.exist(task.done),
task.done.should.equal(!0),
a.should.equal(1),
done();
},2*timeout);
}),

it('async stream task logs finish after task resolves',function(done){
var orchestrator,task,a,timeout=5;


a=0,
task={
name:'test',
fn:function(){
return es.readable(function(){
this.emit('data',{a:'rgs'}),
this.emit('end');
}).pipe(es.map(function(f,cb){
setTimeout(function(){
cb(null,f);
},timeout);
}));
}},



orchestrator=new Orchestrator,
orchestrator.on('task_stop',function(e){
should.exist(e.task),
e.task.should.equal('test'),
-1<e.message.indexOf('stream')&&
++a;

}),
orchestrator._runStep=function(){},


orchestrator._runTask(task),


setTimeout(function(){
a.should.equal(1),
done();
},2*timeout);
});

});
});


'use strict';

var Orchestrator=require('../'),
Stream=require('stream'),
Readable=Stream.Readable,
Writable=Stream.Writable,
Duplex=Stream.Duplex,
Q=require('q'),
fs=require('fs'),
should=require('should');
require('mocha'),

describe('orchestrator',function(){
describe('when given a stream',function(){

it('should consume a Readable stream to relieve backpressure, in objectMode',function(done){
var orchestrator,a;


orchestrator=new Orchestrator,
a=0,
orchestrator.add('test',function(){

var rs=Readable({objectMode:!0,highWaterMark:2});








return rs._read=function(){100>a++?rs.push(a):rs.push(null)},rs;
}),


orchestrator.start('test',function(err){


a.should.be.above(99),
should.not.exist(err),
orchestrator.isRunning.should.equal(!1),
done();
});
}),

it('should consume a Readable stream to relieve backpressure',function(done){
var orchestrator,a;


orchestrator=new Orchestrator,
a=0,
orchestrator.add('test',function(){

var rs=Readable({highWaterMark:2});








return rs._read=function(){100>a++?rs.push('.'):rs.push(null)},rs;
}),


orchestrator.start('test',function(err){


a.should.be.above(99),
should.not.exist(err),
orchestrator.isRunning.should.equal(!1),
done();
});
}),

it('should detect completion of a Writable stream',function(done){
var orchestrator,a,lengthRead;


orchestrator=new Orchestrator,
a=0,
lengthRead=0,
orchestrator.add('test',function(){

var rs=Readable({highWaterMark:2});
rs._read=function(){
100>a++?
rs.push('.'):

rs.push(null);

};


var ws=Writable();







return ws._write=function(chunk,enc,next){lengthRead+=chunk.length,next()},rs.pipe(ws),ws;
}),


orchestrator.start('test',function(err){

a.should.be.above(99),
lengthRead.should.equal(100),
should.not.exist(err),
orchestrator.isRunning.should.equal(!1),
done();
});
}),

it('should detect completion of a Writable stream, in objectMode',function(done){
var orchestrator,a,lengthRead;


orchestrator=new Orchestrator,
a=0,
lengthRead=0,
orchestrator.add('test',function(){

var rs=Readable({objectMode:!0,highWaterMark:2});
rs._read=function(){
100>a++?
rs.push(a):

rs.push(null);

};


var ws=Writable({objectMode:!0});







return ws._write=function(chunk,enc,next){lengthRead++,next()},rs.pipe(ws),ws;
}),


orchestrator.start('test',function(err){

a.should.be.above(99),
lengthRead.should.equal(100),
should.not.exist(err),
orchestrator.isRunning.should.equal(!1),
done();
});
}),

it('should handle an intermediate Readable stream being returned',function(done){
var orchestrator,a,lengthRead;


orchestrator=new Orchestrator,
a=0,
lengthRead=0,
orchestrator.add('test',function(){

var rs=Readable({highWaterMark:2});
rs._read=function(){
100>a++?
rs.push('.'):

rs.push(null);

};


var ws=Writable();







return ws._write=function(chunk,enc,next){lengthRead+=chunk.length,next()},rs.pipe(ws),rs;
}),


orchestrator.start('test',function(err){

a.should.be.above(99),

lengthRead.should.equal(100),
should.not.exist(err),
orchestrator.isRunning.should.equal(!1),
done();
});
}),

it('should handle an intermediate Readable stream being returned, in objectMode',function(done){
var orchestrator,a,lengthRead;


orchestrator=new Orchestrator,
a=0,
lengthRead=0,
orchestrator.add('test',function(){

var rs=Readable({objectMode:!0,highWaterMark:2});
rs._read=function(){
100>a++?
rs.push(a):

rs.push(null);

};


var ws=Writable({objectMode:!0});







return ws._write=function(chunk,enc,next){lengthRead++,next()},rs.pipe(ws),rs;
}),


orchestrator.start('test',function(err){

a.should.be.above(99),

lengthRead.should.equal(100),
should.not.exist(err),
orchestrator.isRunning.should.equal(!1),
done();
});
}),

it('should require the Readable side of a Duplex stream to be closed to trigger completion',function(done){
var orchestrator,
readableClosed=!1,
readCalled=!1,
writableClosed=!1;


orchestrator=new Orchestrator,

orchestrator.add('test',function(){





function closeReadable(){

setTimeout(function(){
readableClosed=!0,
ds.push(null);
},1);
}var ds=Duplex();





















return ds._write=function(chunk,enc,next){next()},ds.on('finish',function(){writableClosed=!0,readCalled&&closeReadable()}),ds._read=function(){readCalled=!0,writableClosed&&closeReadable()},setTimeout(function(){ds.end()},1),ds;
}),


orchestrator.start('test',function(err){

readableClosed.should.be.true,
should.not.exist(err),
orchestrator.isRunning.should.equal(!1),
done();
});
}),

it('should handle a classic stream that is not piped anywhere',function(done){
var orchestrator,



i,readableClosed=!1,readCalled=!1,writableClosed=!1;


orchestrator=new Orchestrator,

orchestrator.add('test',function(){
var rs=new Stream;









return process.nextTick(function(){for(i=1;100>=i;i++)rs.emit('data',i);rs.emit('end')}),rs;
}),


orchestrator.start('test',function(err){

should.not.exist(err),
orchestrator.isRunning.should.equal(!1),
done();
});
}),

it('should handle a classic stream that is piped somewhere',function(done){
var orchestrator,




i,readableClosed=!1,readCalled=!1,writableClosed=!1,lengthRead=0;


orchestrator=new Orchestrator,

orchestrator.add('test',function(){
var rs=new Stream;

process.nextTick(function(){
for(i=0;100>i;i++)
rs.emit('data',i);

rs.emit('end');
});

var ws=new Writable({objectMode:!0,highWaterMark:5});








return ws._write=function(chunk,enc,next){lengthRead++,next()},rs.pipe(ws),rs;
}),


orchestrator.start('test',function(err){

should.not.exist(err),
lengthRead.should.equal(100),
orchestrator.isRunning.should.equal(!1),
done();
});
});

});
});
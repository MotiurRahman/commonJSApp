

'use strict';

var Orchestrator=require('../'),
should=require('should');
require('mocha'),

describe('orchestrator',function(){
describe('_resetTask()',function(){

it('should set done = false on done task',function(done){
var orchestrator,task;


task={
name:'test',
fn:function(){},
done:!0},



orchestrator=new Orchestrator,


orchestrator._resetTask(task),


task.done.should.equal(!1),
done();
}),

it('should not set done = false if done does not exist',function(done){
var orchestrator,task;


task={
name:'test',
fn:function(){}},




orchestrator=new Orchestrator,


orchestrator._resetTask(task),


should.not.exist(task.done),
done();
}),

it('should remove start',function(done){
var orchestrator,task;


task={
name:'test',
fn:function(){},
start:new Date},



orchestrator=new Orchestrator,


orchestrator._resetTask(task),


should.not.exist(task.start),
done();
}),

it('should remove stop',function(done){
var orchestrator,task;


task={
name:'test',
fn:function(){},
stop:new Date},



orchestrator=new Orchestrator,


orchestrator._resetTask(task),


should.not.exist(task.stop),
done();
}),

it('should remove duration',function(done){
var orchestrator,task;


task={
name:'test',
fn:function(){},
duration:new Date},



orchestrator=new Orchestrator,


orchestrator._resetTask(task),


should.not.exist(task.duration),
done();
}),

it('should remove args',function(done){
var orchestrator,task;


task={
name:'test',
fn:function(){},
args:{}},



orchestrator=new Orchestrator,


orchestrator._resetTask(task),


should.not.exist(task.args),
done();
}),

it('should not die if not passed a task',function(done){

var orchestrator=new Orchestrator;


orchestrator._resetTask(),



done();
});

});
});
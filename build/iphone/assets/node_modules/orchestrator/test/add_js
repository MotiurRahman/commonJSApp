


'use strict';

var Orchestrator=require('../'),
should=require('should');
require('mocha'),

describe('orchestrator',function(){
describe('add()',function(){

it('should define a task',function(done){
var orchestrator,fn;


fn=function(){},


orchestrator=new Orchestrator,
orchestrator.add('test',fn),


should.exist(orchestrator.tasks.test),
orchestrator.tasks.test.fn.should.equal(fn),
done();
});

var failTest=function(one,two,three){
var orchestrator,actualErr;


orchestrator=new Orchestrator;


try{
orchestrator.add(one,two,three);
}catch(err){
actualErr=err;
}


should.exist(actualErr),
should.ok(-1<actualErr.message.indexOf('Task'));
};

it('should error if name is not a string',function(done){
var name,fn;


name=9,
fn=function(){},


failTest(name,fn),
done();
}),

it('should error if dep is not an array',function(done){
var name,dep,fn;


name='name',
dep=9,
fn=function(){},


failTest(name,dep,fn),
done();
}),

it('should error if dep contains a non-string',function(done){
var name,dep,fn;


name='name',
dep=9,
fn=function(){},


failTest(name,dep,fn),
done();
}),

it('should error if fn is not a function',function(done){
var name,fn;


name='name',
fn=9,


failTest(name,fn),
done();
}),

it('should error if fn is not a function and there are dependencies',function(done){
var name,dep,fn;


name='name',
dep=['name'],
fn=9,


failTest(name,dep,fn),
done();
}),

it('should accept dependencies with no function',function(done){
var orchestrator,name,dep;


name='name',
dep=['name'],


orchestrator=new Orchestrator,
orchestrator.add(name,dep),


should.exist(orchestrator.tasks.name),
orchestrator.tasks.name.dep.should.equal(dep),
done();
});

});
});
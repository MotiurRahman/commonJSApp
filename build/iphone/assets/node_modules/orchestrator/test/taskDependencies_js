


'use strict';

var Orchestrator=require('../'),
Q=require('q'),
should=require('should');
require('mocha'),

describe('orchestrator',function(){
describe('run() task dependencies',function(){


it('should run tasks in specified order if no dependencies',function(done){
var orchestrator,a,fn,fn2;


a=0,
fn=function(){
a.should.equal(1),
++a;
},
fn2=function(){
a.should.equal(2),
++a;
},


orchestrator=new Orchestrator,
orchestrator.on('start',function(e){
should.exist(e),
a.should.equal(0),
++a,
e.message.should.startWith('seq: ');
}),
orchestrator.add('test1',fn),
orchestrator.add('test2',fn2),
orchestrator.start('test1','test2',function(err){

a.should.equal(3),
should.not.exist(err),
done();
});
}),

it('should run dependency then specified task',function(done){
var orchestrator,a,fn,fn2;


a=0,
fn=function(){
a.should.equal(1),
++a;
},
fn2=function(){
a.should.equal(2),
++a;
},


orchestrator=new Orchestrator,
orchestrator.on('start',function(e){
should.exist(e),
a.should.equal(0),
++a,
e.message.should.equal('seq: dep,test');
}),
orchestrator.add('dep',fn),
orchestrator.add('test',['dep'],fn2),
orchestrator.start('test'),


a.should.equal(3),
done();
}),

it('should run asynchronous dependency then specified task',function(done){
var orchestrator,a,fn,fn2;


a=0,
fn=function(){
var deferred=Q.defer();





return setTimeout(function(){a.should.equal(1),++a,deferred.resolve()},1),deferred.promise;
},
fn2=function(){
var deferred=Q.defer();





return setTimeout(function(){a.should.equal(2),++a,deferred.resolve()},1),deferred.promise;
},


orchestrator=new Orchestrator,
orchestrator.on('start',function(e){
should.exist(e),
a.should.equal(0),
++a,
e.message.should.equal('seq: dep,test');
}),
orchestrator.add('dep',fn),
orchestrator.add('test',['dep'],fn2),
orchestrator.start('test',function(){

orchestrator.isRunning.should.equal(!1),
a.should.equal(3),
done();
}),
orchestrator.isRunning.should.equal(!0);
}),

it('should run all tasks of complex dependency chain',function(done){
var orchestrator,a,fn1,fn2,fn3,fn4,timeout=2;


a=0,


fn1=function(){
var deferred=Q.defer();




return setTimeout(function(){++a,deferred.resolve()},5*timeout),deferred.promise;
},
fn2=function(){
var deferred=Q.defer();




return setTimeout(function(){++a,deferred.resolve()},timeout),deferred.promise;
},
fn3=function(){
var deferred=Q.defer();




return setTimeout(function(){++a,deferred.resolve()},timeout),deferred.promise;
},
fn4=function(){
++a;
},


orchestrator=new Orchestrator,
orchestrator.on('start',function(e){
should.exist(e),
a.should.equal(0),
++a,
e.message.should.equal('seq: fn1,fn2,fn3,fn4');
}),
orchestrator.add('fn1',fn1),
orchestrator.add('fn2',fn2),
orchestrator.add('fn3',['fn1','fn2'],fn3),
orchestrator.add('fn4',['fn3'],fn4),
orchestrator.start('fn4',function(){

orchestrator.isRunning.should.equal(!1),
a.should.equal(5),
done();
}),
orchestrator.isRunning.should.equal(!0);
});

});
});
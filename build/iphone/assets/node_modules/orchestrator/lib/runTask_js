

'use strict';

var eos=require('end-of-stream'),
consume=require('stream-consume');

module.exports=function(task,done){
var finish,cb,start,r,that=this,isDone=!1;

finish=function(err,runMethod){
var hrDuration=process.hrtime(start);

isDone&&!err&&(
err=new Error('task completion callback called too many times')),

isDone=!0;

var duration=hrDuration[0]+hrDuration[1]/1e9;

done.call(that,err,{
duration:duration,
hrDuration:hrDuration,
runMethod:runMethod});

},

cb=function(err){
finish(err,'callback');
};

try{
start=process.hrtime(),
r=task(cb);
}catch(err){
return finish(err,'catch');
}

r&&'function'==typeof r.then?


r.then(function(){
finish(null,'promise');
},function(err){
finish(err,'promise');
}):

r&&'function'==typeof r.pipe?(


eos(r,{error:!0,readable:r.readable,writable:r.writable&&!r.readable},function(err){
finish(err,'stream');
}),


consume(r)):

0===task.length&&

finish(null,'sync');





};


'use strict';

var util=require('util'),
events=require('events'),
EventEmitter=events.EventEmitter,
runTask=require('./lib/runTask'),

Orchestrator=function(){
EventEmitter.call(this),
this.doneCallback=void 0,
this.seq=[],
this.tasks={},
this.isRunning=!1;
};
util.inherits(Orchestrator,EventEmitter),

Orchestrator.prototype.reset=function(){







return this.isRunning&&this.stop(null),this.tasks={},this.seq=[],this.isRunning=!1,this.doneCallback=void 0,this;
},
Orchestrator.prototype.add=function(name,dep,fn){






if(fn||'function'!=typeof dep||(fn=dep,dep=void 0),dep=dep||[],fn=fn||function(){},!name)
throw new Error('Task requires a name');


if('string'!=typeof name)
throw new Error('Task requires a name that is a string');

if('function'!=typeof fn)
throw new Error('Task '+name+' requires a function that is a function');

if(!Array.isArray(dep))
throw new Error('Task '+name+' can\'t support dependencies that is not an array of strings');











return dep.forEach(function(item){if('string'!=typeof item)throw new Error('Task '+name+' dependency '+item+' is not a string')}),this.tasks[name]={fn:fn,dep:dep,name:name},this;
},
Orchestrator.prototype.task=function(name,dep,fn){return(
dep||fn?void

this.add(name,dep,fn):

this.tasks[name]);

},
Orchestrator.prototype.hasTask=function(name){
return!!this.tasks[name];
},

Orchestrator.prototype.start=function(){
var args,arg,lastTask,i,names=[],seq=[];

if(args=Array.prototype.slice.call(arguments,0),args.length)





for(lastTask=args[args.length-1],'function'==typeof lastTask&&(this.doneCallback=lastTask,args.pop()),i=0;i<args.length;i++)

if(arg=args[i],'string'==typeof arg)
names.push(arg);else
if(Array.isArray(arg))
names=names.concat(arg);else

throw new Error('pass strings or arrays of strings');















if(this.isRunning?this._resetSpecificTasks(names):this._resetAllTasks(),this.isRunning&&(names=names.concat(this.seq)),1>names.length)

for(i in this.tasks)
this.tasks.hasOwnProperty(i)&&
names.push(this.tasks[i].name);



seq=[];
try{
this.sequence(this.tasks,names,seq,[]);
}catch(err){










return err&&(err.missingTask&&this.emit('task_not_found',{message:err.message,task:err.missingTask,err:err}),err.recursiveTasks&&this.emit('task_recursion',{message:err.message,recursiveTasks:err.recursiveTasks,err:err})),this.stop(err),this;
}






return this.seq=seq,this.emit('start',{message:'seq: '+this.seq.join(',')}),this.isRunning||(this.isRunning=!0),this._runStep(),this;
},
Orchestrator.prototype.stop=function(err,successfulFinish){










if(this.isRunning=!1,err?this.emit('err',{message:'orchestration failed',err:err}):successfulFinish?this.emit('stop',{message:'orchestration succeeded'}):(err='orchestration aborted',this.emit('err',{message:'orchestration aborted',err:err})),this.doneCallback)

this.doneCallback(err);else
if(err&&!this.listeners('err').length)

throw err;

},
Orchestrator.prototype.sequence=require('sequencify'),
Orchestrator.prototype.allDone=function(){
var i,task,allDone=!0;
for(i=0;i<this.seq.length;i++)

if(task=this.tasks[this.seq[i]],!task.done){
allDone=!1;
break;
}

return allDone;
},
Orchestrator.prototype._resetTask=function(task){
task&&(
task.done&&(
task.done=!1),

delete task.start,
delete task.stop,
delete task.duration,
delete task.hrDuration,
delete task.args);

},
Orchestrator.prototype._resetAllTasks=function(){
var task;
for(task in this.tasks)
this.tasks.hasOwnProperty(task)&&
this._resetTask(this.tasks[task]);


},
Orchestrator.prototype._resetSpecificTasks=function(names){
var i,name,t;

if(names&&names.length)
for(i=0;i<names.length;i++)
name=names[i],
t=this.tasks[name],
t&&(
this._resetTask(t),
t.dep&&t.dep.length&&
this._resetSpecificTasks(t.dep));






},
Orchestrator.prototype._runStep=function(){
var i,task;
if(this.isRunning){


for(i=0;i<this.seq.length;i++)




if(task=this.tasks[this.seq[i]],task.done||task.running||!this._readyToRunTask(task)||this._runTask(task),!this.isRunning)
return;


this.allDone()&&
this.stop(null,!0)}

},
Orchestrator.prototype._readyToRunTask=function(task){
var
i,name,t,ready=!0;
if(task.dep.length)
for(i=0;i<task.dep.length;i++){


if(name=task.dep[i],t=this.tasks[name],!t){

this.stop('can\'t run '+task.name+' because it depends on '+name+' which doesn\'t exist'),
ready=!1;
break;
}
if(!t.done){
ready=!1;
break;
}
}

return ready;
},
Orchestrator.prototype._stopTask=function(task,meta){
task.duration=meta.duration,
task.hrDuration=meta.hrDuration,
task.running=!1,
task.done=!0;
},
Orchestrator.prototype._emitTaskDone=function(task,message,err){
task.args||(
task.args={task:task.name}),

task.args.duration=task.duration,
task.args.hrDuration=task.hrDuration,
task.args.message=task.name+' '+message;
var evt='stop';
err&&(
task.args.err=err,
evt='err'),


this.emit('task_'+evt,task.args);
},
Orchestrator.prototype._runTask=function(task){
var that=this;

task.args={task:task.name,message:task.name+' started'},
this.emit('task_start',task.args),
task.running=!0,

runTask(task.fn.bind(this),function(err,meta){return(
that._stopTask.call(that,task,meta),
that._emitTaskDone.call(that,task,meta.runMethod,err),
err?
that.stop.call(that,err):void

that._runStep.call(that));
});
};


var events=['start','stop','err','task_start','task_stop','task_err','task_not_found','task_recursion'],

listenToEvent=function(target,event,callback){
target.on(event,function(e){
e.src=event,
callback(e);
});
};

Orchestrator.prototype.onAll=function(callback){
var i;
if('function'!=typeof callback)
throw new Error('No callback specified');


for(i=0;i<events.length;i++)
listenToEvent(this,events[i],callback);

},

module.exports=Orchestrator;